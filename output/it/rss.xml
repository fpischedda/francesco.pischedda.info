<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>@FPSD</title><link>https://francesco.pischedda.info/</link><description>random.choice(['programming', 'gaming', 'stuff'])</description><atom:link href="https://francesco.pischedda.info/it/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>it</language><lastBuildDate>Sun, 15 Jul 2018 10:53:26 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Routing Celery task for simple prioritization</title><link>https://francesco.pischedda.info/it/posts/routing-celery-task-for-simple-prioritization/</link><dc:creator>Francesco "fpsd" Pischedda</dc:creator><description>&lt;div&gt;&lt;p&gt;Like most businesses, where I &lt;a class="reference external" href="https://www.vimcar.com"&gt;work&lt;/a&gt; we need to send lots of notifications to our
users, mainly emails and push notifications; the setup is quite simple:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a service accepts requests to send notifications to users&lt;/li&gt;
&lt;li&gt;the notification service prepare the message and put it in a queue&lt;/li&gt;
&lt;li&gt;a pool of workers fetches messages from the queue and perform the actual delivery&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;This works reasonably well and we can scale the service increasing the
instances of the notification service and the delivery workers.&lt;/p&gt;
&lt;p&gt;This setup is used also when a user requests an export of her/his historical
data; since this process can take a while, a background job fetches the data,
generates a pdf and sends it via email using the notifications service.
At the same time we generate hundreds of thousands of notifications, usually in
the morning, and this fill up the notifiation queue so if a user requests an
export during this time frame its email will have to wait a lot before it can
be processed.&lt;/p&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;We have evaluated a couple of solutions:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;per message priority&lt;/li&gt;
&lt;li&gt;dedicated low priority queue for high volume automaticly generated
notifications using task routing&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The first solution is a generic one but as far as we have seen it is not easy
to have the guarantie that a high priority message will be delivered in our
desired time frame and we opted for the second solution because we don't need
a fine grained prioritization system (maybe in the future) but just a way to
continue to deliver user generated notifications when we are sending our
automated high volume notifications during the morning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation"&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Our stack is based on &lt;a class="reference external" href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt; and it is composed mainly by two parts:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;the notifications service thats send messages to a queue&lt;/li&gt;
&lt;li&gt;a pool of workers that fetch messages from the queue and deliver the
notifications&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;To achieve our goal we only had to change the way that notifications service
sends messages to the queue by specifing the low or default priority queue based
on the message type and by running a specific pool of workers bound to each
priority queue.&lt;/p&gt;
&lt;p&gt;Example code with routing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from celery import Celery

celery = Celery()
celery.main = 'Test app'
celery.config_from_object('celeryconfig')
celery.autodiscover_tasks(
    ['tasks'],
    force=True
)


@celery.task
def task(prio, message):
    print(f'{prio}: {message}')

# calling the task specifying the queue
task.apply_async(args=('default', next(generator)),
                 queue='default')
&lt;/pre&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;How to run a worker specifing the queue::&lt;/dt&gt;
&lt;dd&gt;$ celery -A tasks worker --loglevel=INFO -Q default&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;This solution works but there is an efficency problem since when the low
priority queue will be empty the low priority workers will be idle wasting
precious (and paid) resources; fortunately there is a simple solution for this
because it is possible to specify more than one queue using the -Q parameter.
This way we will have a dedicated pool of workers that will work on messages
generated by user activity and a second pool of workers that will handle the
automated messages and, when those will be finished, these workers can help
with default priority messages.&lt;/p&gt;
&lt;p&gt;An example implementation is provided in this &lt;a class="reference external" href="https://github.com/fpischedda/celery-routing-example"&gt;repo&lt;/a&gt; with instruction to run the
different use cases.&lt;/p&gt;
&lt;p&gt;P.S.
&lt;a class="reference external" href="https://www.vimcar.com"&gt;We&lt;/a&gt; are &lt;a class="reference external" href="https://vimcar.de/career/jobs"&gt;hiring&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://francesco.pischedda.info/it/posts/routing-celery-task-for-simple-prioritization/</guid><pubDate>Sun, 15 Jul 2018 07:10:22 GMT</pubDate></item><item><title>Cython and C pointers</title><link>https://francesco.pischedda.info/it/posts/cython-and-c-pointers/</link><dc:creator>Francesco "fpsd" Pischedda</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.cython.org/"&gt;Cython&lt;/a&gt; is a powerful tool that can speed up your &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; code or can help you
to quickly create an extension module for a library that has c bindings.&lt;/p&gt;
&lt;p&gt;This post is not a cython tutorial but its about a problem I have encountered
during the development of a wrapper to Wakaama LWM2M library; if you
want to learn more about &lt;a class="reference external" href="http://www.cython.org/"&gt;Cython&lt;/a&gt; please refer to its &lt;a class="reference external" href="https://cython.readthedocs.io/en/latest/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During the development of said wrapper I have had a nasty strange bug affecting
my code, at some point some object referenced by a pointer kept at the C library
side seemed to change its value! For example think about this situation:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;you pass an object to a certain c function&lt;/li&gt;
&lt;li&gt;the object's pointer is stored internally by the c library&lt;/li&gt;
&lt;li&gt;you retrieve the object from the c library but its content its not the same...it's not even an instance of the same class!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To reproduce this behaviour please have a look at overwrite.py in my test &lt;a class="reference external" href="https://github.com/fpischedda/cython-post"&gt;project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At first I've been thinking about memory corruption caused by the C library code;
this wrong assumption costed me at least two days of messing with gdb (that
saved my life in another memory related bug) that have not given any useful
insight.&lt;/p&gt;
&lt;p&gt;I don't remember how I've spotted this problem but probably I should have tryed
everything until something pointed me to the right direction.&lt;/p&gt;
&lt;p&gt;What seems to happen here is something like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;create an object and assign it to a variable A&lt;/li&gt;
&lt;li&gt;store its pointer in the C library&lt;/li&gt;
&lt;li&gt;get back the pointer of the object; it will be the same object as referenced by A&lt;/li&gt;
&lt;li&gt;assign a new object to A&lt;/li&gt;
&lt;li&gt;create an object assign it to a variable B&lt;/li&gt;
&lt;li&gt;get back the pointer of the object; it will NOT be the same object as
referenced by A but it will be the one referenced by B&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When the variable A is referencing the new object the old one is not referenced
by anyone in the python world and its memory will became available to store the
new object assigned to B and the pointer in the C world is now pointing to what
is referenced by B.&lt;/p&gt;
&lt;p&gt;It may seems obvious but when it happened to me it was inside a callback
originating in the C code and being handled by a function defined in the
cython context.&lt;/p&gt;
&lt;div class="section" id="lesson-learned"&gt;
&lt;h2&gt;Lesson learned&lt;/h2&gt;
&lt;p&gt;When working with two different languages together
nothing is naive especially when you are wrapping some code that you don't
really know and that can bite your ass as soon as you think "what can go wrong?"&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://francesco.pischedda.info/it/posts/cython-and-c-pointers/</guid><pubDate>Fri, 06 Jan 2017 15:43:40 GMT</pubDate></item><item><title>The joy of contributing to open source/free software</title><link>https://francesco.pischedda.info/it/posts/the-joy-of-contributing-to-open-sourcefree-software/</link><dc:creator>Francesco "fpsd" Pischedda</dc:creator><description>&lt;div&gt;&lt;p&gt;From time to time I like to give back to the community with small patches or
trying to solve issues, sometimes my contribution comes from bugs found while
implementing some kind of software and sometimes I just notice something that
can be fixed or improved.&lt;/p&gt;
&lt;p&gt;Usually to process is a kind of cold syntetic handshake between my code and
whatever (D)VCS system used to accept my work but it happens that you will
find some real person at the other side and this is especially true at
Mozilla.&lt;/p&gt;
&lt;p&gt;In my opinion Mozilla infrastructure and people are key factors in welcoming new
developers; there are clear documents about the processes which
you will be pointed to by the team and there are real persons that will help you
until you master the procedure.&lt;/p&gt;
&lt;div class="section" id="which-are-the-take-aways-of-contributing"&gt;
&lt;h2&gt;Which are the take aways of contributing?&lt;/h2&gt;
&lt;p&gt;First of all you are forced to read someone else's code; if you work alone or
your employer does not force code reviews this is really helpful because you
are probably going to learn a lot from other sources.&lt;/p&gt;
&lt;p&gt;Similarly when contributing to other people's code you are forced to add unit
tests to your patches otherwise your code will not be accepted; this is ideal
in the situations where in your day to day work tests are seens as useless
nerd goodies.&lt;/p&gt;
&lt;p&gt;When contributing to bigger projects there is usually a strong procedure that
must be followed; this is not just bureaucracy but it must be seen as a backbone
of the development/deployment/release process. Knowing that any regression
"shall not pass" is a huge boost to your confidence while creating your patch.&lt;/p&gt;
&lt;p&gt;And finally people! I think that is the most amazing part of the work; you'll
get to know persons that will teach you something (or maybe the opposite), you
will have to communicate effectively to make your point or just to understand
what problem you are going to fix, increasing your communication skills; oh and
don't we forget the joy of talking to nice people :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Contributing can be a beautiful and useful experience for beginners,
intermediate and senior developers, everyone can learn something while doing
useful work for the community (which in turn will provide a better tools for
yourself too); even if the amount of free time you have at hand is a couple
of hours a week I suggest trying at least to document some software you use or
fix that annoying bug that is driving you crazy, you will thank yourself!&lt;/p&gt;
&lt;p&gt;P.S.&lt;/p&gt;
&lt;p&gt;I'd like to thank Andrew Halberstadt for his help and his patience while
working on some issues on Mozilla Central repo/bugzilla, thank you Andrew!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://francesco.pischedda.info/it/posts/the-joy-of-contributing-to-open-sourcefree-software/</guid><pubDate>Thu, 29 Dec 2016 14:26:08 GMT</pubDate></item><item><title>cx_Freeze, again</title><link>https://francesco.pischedda.info/it/posts/cx_freeze_again/</link><dc:creator>Francesco "fpsd" Pischedda</dc:creator><description>&lt;div&gt;&lt;p&gt;It's been a long time since the last post and for sure I was not thiking about
another post about cx_Freeze.
I have spent this week end trying (and at the end  succeding) to build an
update to an old software. For future memory I'll write briefly the steps needed
to get a functional build without losing my mind.&lt;/p&gt;
&lt;div class="section" id="brief-description-of-the-problem"&gt;
&lt;h2&gt;Brief description of the problem&lt;/h2&gt;
&lt;p&gt;The software is a desktop application used to upload email attachments to a
web based data store; the application talk to the web app using a "RESTy" api,
and fetches the file from a email address; the GUI is written with the beatiful
PyQT5 (someone may prefere PySide) and usually this dependency is a pain to
work with but I have to admit that the newer version installs gracefuly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="os-version-and-things-to-download"&gt;
&lt;h2&gt;OS version and things to download&lt;/h2&gt;
&lt;p&gt;The person using this software needs to run it from a Windows OS and at this time
Windows 7 is the oldes worsion of the OS I want to support (no Vista, please)
since addressing Windows 10 will produce an executable with no retro compatibily
and Windows 8 have less installs than 7.&lt;/p&gt;
&lt;p&gt;The first software needed to be dowloaded is obviusly the Python 3.5 interpreter
and after its installation came the first surprise, it doesn't run because of
some missing dlls; after some research I have downloaded the redistribuitable
runtime and it started to work as expected.&lt;/p&gt;
&lt;p&gt;After Python was ready I've had to install the pip utility which was not
automatically installed, maybe I have forgotten to chek the corresponding
option in the installer; anyway everything installed correctly using it, this is
a brief list of dependencies:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;requests: OK&lt;/li&gt;
&lt;li&gt;paramiko: OK&lt;/li&gt;
&lt;li&gt;imapclient: OK&lt;/li&gt;
&lt;li&gt;PyQT: (surprisingly!) OK&lt;/li&gt;
&lt;li&gt;cx_Freeze: Not ok at all..&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cx_Freeze requires Widonws build tools that can freely (as in beer) downloaded
and installed but even after that I was not able to install it from pip;
fortunately some kind people provided a procompiled wheel for it but be sure
to download the 5.0 version because the 4.x was not able to produce a proper
executable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-dependencies-and-some-setup-py-notes"&gt;
&lt;h2&gt;Additional dependencies and some setup.py notes&lt;/h2&gt;
&lt;p&gt;Having not touched I tought that the setup script was soemwhat correct since
the last build was succesful, nothing more far from the truth; the first thing
has been a nice surprise, cx_Freeze recognized correctly all the dlls to use in
the final package and referencing additional dlls is not needed anymore, good
work cx_Freeze guys!&lt;/p&gt;
&lt;p&gt;After the first build ihave started a cycle of try, fix retry until the
application could as expected, here is a list of additional dependencis that I
had to install and reference in the setup.py file:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;appdir&lt;/li&gt;
&lt;li&gt;packaging&lt;/li&gt;
&lt;li&gt;atexit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;appdir and atexit only need to be referenced as packages instead packaging
requires some more fine tuining so I had to add this additional sub_packages
to the includes settings of the build_exe_options dictionary:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;packaging.version&lt;/li&gt;
&lt;li&gt;packaging.specifiers&lt;/li&gt;
&lt;li&gt;packaging.requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="final-words"&gt;
&lt;h2&gt;Final words&lt;/h2&gt;
&lt;p&gt;It took me a couple of hours of trial/error to be able to ship the build and I
hope to not have to repeat this madness again soon; if I'll need to create a new
build in the future I hope that this little post will halp me not to waste my
time again.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://francesco.pischedda.info/it/posts/cx_freeze_again/</guid><pubDate>Sun, 13 Nov 2016 20:45:17 GMT</pubDate></item><item><title>PyQT5 and cx_Freeze Windows™ target tips</title><link>https://francesco.pischedda.info/it/posts/pyqt5-and-cx_freeze-windowstm-target-tips/</link><dc:creator>Francesco "fpsd" Pischedda</dc:creator><description>&lt;div&gt;&lt;p&gt;One of my preferred benefits of &lt;a class="reference external" href="http://www.python.org"&gt;Python&lt;/a&gt; is its portability and if coupled
with good libraries such as &lt;a class="reference external" href="http://pyqt.sourceforge.net/Docs/PyQt5/index.html"&gt;PyQT5&lt;/a&gt; the possibilities are endless.&lt;/p&gt;
&lt;p&gt;Now imagine you created a new shiny desktop application and you want to
distribute it, how can you package the app for easy installation?&lt;/p&gt;
&lt;div class="section" id="say-hello-to-cx-freeze"&gt;
&lt;h2&gt;Say hello to &lt;a class="reference external" href="http://cx-freeze.sourceforge.net"&gt;cx_Freeze&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://cx-freeze.sourceforge.net"&gt;cx_Freeze&lt;/a&gt; is a tool that can create a standalone version of your application
so you can easily distribute it and the end user don't have to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;download your source code&lt;/li&gt;
&lt;li&gt;a python interpreter&lt;/li&gt;
&lt;li&gt;setup pip or easy_install, libraries and so on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another nice feature of &lt;a class="reference external" href="http://cx-freeze.sourceforge.net"&gt;cx_Freeze&lt;/a&gt; is that it can create an installer for many
different operating systems giving your application a more "professional" look.&lt;/p&gt;
&lt;p&gt;I strongly suggest giving it a try; using one of the sample setup scripts
should be enough to get started.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-minor-issues"&gt;
&lt;h2&gt;Some minor issues&lt;/h2&gt;
&lt;p&gt;A simple application which only depends on pure python packages usually will
not give you any headaches but if you have dependencies like PyQT5 a bit of
attention is required.
In my case not all the required DLL were included in the installer package and
that generated a strange error message that was very hard to debug but thanks
to sites like &lt;a class="reference external" href="http://www.stackoverflow.com"&gt;StackOverflow&lt;/a&gt; I've found a nice &lt;a class="reference external" href="http://bit.ly/1kvWVAa"&gt;fix&lt;/a&gt; for it.
It is worth noting that linked solution is not (always?) enough but there is a
quick solution (at least in my case): add the file libegl.dll to the
"include_files" &lt;a class="reference external" href="http://cx-freeze.sourceforge.net"&gt;cx_Freeze&lt;/a&gt; building options.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-test-your-shiny-new-installer"&gt;
&lt;h2&gt;How to test your shiny new installer&lt;/h2&gt;
&lt;p&gt;In order to test your installer and be sure that all the DLLs are incuded and
your application is not "cheating" on you using system DLLs I suggest to create
a clean windows installation inside a virtual machine; this way you can test
your installer in a real case scenario and fix your build scripts accordingly.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://francesco.pischedda.info/it/posts/pyqt5-and-cx_freeze-windowstm-target-tips/</guid><pubDate>Fri, 02 May 2014 11:04:54 GMT</pubDate></item><item><title>Logging model changes with SQLAlchemy listeners</title><link>https://francesco.pischedda.info/it/posts/logging-model-changes-with-sqlalchemy-listeners/</link><dc:creator>Francesco "fpsd" Pischedda</dc:creator><description>&lt;div&gt;&lt;div class="section" id="scenario"&gt;
&lt;h2&gt;Scenario&lt;/h2&gt;
&lt;p&gt;Imagine you have a slew of models in your application, at some point you feel
the need to log somewhere creation, modification or deletion of data belonging
to these models.
How to proceed without having to modify the classes one by one?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-on-sqlalchemy"&gt;
&lt;h2&gt;What's on sqlalchemy&lt;/h2&gt;
&lt;p&gt;SQLAlchemy (&lt;a class="reference external" href="http://sqlalchemy.org"&gt;http://sqlalchemy.org&lt;/a&gt;) offers a couple of interesting mechanisms:
the first concerns the possibility to hook to some event listeners such as
before_insert, before_update, before_delete and the corresponding after_*.
Additional help is provided by sqlalchemy the opportunity to work on a model
after its definition by overriding the method __declare_last__.
Using these facts, and assuming that you have defined a model named MyModel,
if we wanted to intercept the event "after_insert" we could write the following
code:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_62fb13b58f514080a136f507d09356fa-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_62fb13b58f514080a136f507d09356fa-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#lets pretend to have defined our model&lt;/span&gt;
&lt;a name="rest_code_62fb13b58f514080a136f507d09356fa-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_62fb13b58f514080a136f507d09356fa-4"&gt;&lt;/a&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;after_insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_62fb13b58f514080a136f507d09356fa-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#do some stuff&lt;/span&gt;
&lt;a name="rest_code_62fb13b58f514080a136f507d09356fa-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_62fb13b58f514080a136f507d09356fa-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_62fb13b58f514080a136f507d09356fa-8"&gt;&lt;/a&gt;  &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
&lt;a name="rest_code_62fb13b58f514080a136f507d09356fa-9"&gt;&lt;/a&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__declare_last__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_62fb13b58f514080a136f507d09356fa-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"after_insert"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;after_insert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Whenever an object of class MyModel will be entered into the database
after_insert method will be called , passing as parameters the mapping of the
model, the connection and the target is none other than the object that has
just been entered into the database.&lt;/p&gt;
&lt;p&gt;In the event that you are intercepting the creation or deletion of an object
is sufficient to access its primary key to identify it in your log, but if we
wanted to know which fields have been modified, with new and old values, as a
result of an update it gets a little more complicated, but not too much.
In fact sqlalchemy allows us, quite easily , to check the status of the fields
of an object using the function sqlalchemy.orm.attributes.get_history (&lt;a class="reference external" href="http://docs.sqlalchemy.org/en/latest/orm/session.html#sqlalchemy.orm.attributes.get_history"&gt;http://docs.sqlalchemy.org/en/latest/orm/session.html#sqlalchemy.orm.attributes.get_history&lt;/a&gt;).
This function is called for each field, it returns an object of type History (&lt;a class="reference external" href="http://docs.sqlalchemy.org/en/latest/orm/session.html#sqlalchemy.orm.attributes.History"&gt;http://docs.sqlalchemy.org/en/latest/orm/session.html#sqlalchemy.orm.attributes.History&lt;/a&gt;)
which we will use the method has_changes() to check for changes, and if there were,
getting the new and old values of the field that we are analyzing, for example:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_be135b7072b14169ac3742efa9b79bc0-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_history&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"a_field"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_be135b7072b14169ac3742efa9b79bc0-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_changes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;a name="rest_code_be135b7072b14169ac3742efa9b79bc0-3"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;#do something using h.deleted list to get the old values&lt;/span&gt;
&lt;a name="rest_code_be135b7072b14169ac3742efa9b79bc0-4"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;#do something using h.added list to get the new values&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="loggablemixin"&gt;
&lt;h2&gt;LoggableMixin&lt;/h2&gt;
&lt;p&gt;Clearly to do this for all models of an application may be costly in terms of
time and code maintenance (and extremely annoying) so you might think about
creating a generic Mixin with which to extend the models of our application.
Below is the skeleton for the implementation of the above mixin, omitting the
details of where and how the logs are stored:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoggableMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;after_insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#do some stuff for the insert&lt;/span&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-7"&gt;&lt;/a&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;after_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-8"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#do some stuff for the update, maybe saving the changed fields values using get_history&lt;/span&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-11"&gt;&lt;/a&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;after_delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;#do some stuff&lt;/span&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-15"&gt;&lt;/a&gt;  &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-16"&gt;&lt;/a&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__declare_last__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"after_insert"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;after_insert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-18"&gt;&lt;/a&gt;    &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"after_update"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;after_update&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86e2ad396b3e43938b6b53115f8ecdb1-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"after_delete"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;after_delete&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;so, for each model we want to log changes it will be sufficient to inherit from LoggableMixin:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_317c70dfa3144751b0f9f166da9b8a01-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SomeSuperClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LoggableMixin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_317c70dfa3144751b0f9f166da9b8a01-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="improvements"&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;One of the first improvements you can make to the class LoggableMixin could be
the separation of the class in three different classes eg . LogInsertMixin, LogUpdateMixin LogDeleteMixin,
in my case I preferred to have it all together given the small size of the class.
A second improvement would be the generalization of mixin allowing you to
specify which functions (or methods) to be assigned to different listeners,
and once more the specific needs of the application I'm working on does not
require this level of abstraction and can live well with this approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;SQLAlchemy provides a number of services to work with the model, the system
just described would not have been so easy to implement if it were not for the
quality of the API of sqlalchemy.
I invite anyone to go deeper in the documentation for sqlalchemy (&lt;a class="reference external" href="http://docs.sqlalchemy.org"&gt;http://docs.sqlalchemy.org&lt;/a&gt;)
because within it are preserved gems of great value.
For those wishing to see a concrete implementation of the topics discussed in
this post they can take a look at the file sysgrove/models.py in the repository
at &lt;a class="reference external" href="https://bitbucket.org/sysgrove/sysgrove"&gt;https://bitbucket.org/sysgrove/sysgrove&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://francesco.pischedda.info/it/posts/logging-model-changes-with-sqlalchemy-listeners/</guid><pubDate>Wed, 11 Dec 2013 14:33:03 GMT</pubDate></item><item><title>Our QT date picker</title><link>https://francesco.pischedda.info/it/posts/our-qt-date-picker/</link><dc:creator>Francesco "fpsd" Pischedda</dc:creator><description>&lt;div&gt;&lt;p&gt;One of the first works carried out just entering at SysGrove (&lt;a class="reference external" href="http://sysgrove.com"&gt;http://sysgrove.com&lt;/a&gt; )
consisted in rewriting the date picker component in our application and
requests regarding this component was that it was similar, at least as a
feature, to the date picker available in windows 7 ™. The most interesting
aspect of this component is the ability to be able to do some sort of zoom
dates, I try to explain with an example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It would be a classic date picker where are the days of the current month and
the ability to change the month with the classic arrows&lt;/li&gt;
&lt;li&gt;Clicking on the button in the middle of the arrows the days are replaced by
months and the arrows will change the current year&lt;/li&gt;
&lt;li&gt;Again by clicking on the button in the middle of the arrows months will be
replaced by the years and the arrows will change the decade&lt;/li&gt;
&lt;li&gt;Selecting a year will return a month view and by selecting a month will
return a day view&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some images could help to understand the behaviour:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="day selector" src="https://francesco.pischedda.info/images/qt-calendar/date-picker-day.png"&gt;
&lt;p class="caption"&gt;The day selector, with month changer arrows; if you click the middle button
you'll see the month selector.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/images/qt-calendar/date-picker-month.png" src="https://francesco.pischedda.info/images/qt-calendar/date-picker-month.png"&gt;
&lt;p class="caption"&gt;The month selector, if you click on the middle button you'll see the year
selector.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="/images/qt-calendar/date-picker-year.png" src="https://francesco.pischedda.info/images/qt-calendar/date-picker-year.png"&gt;
&lt;p class="caption"&gt;The selector selector.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Fortunately SysGrove is a company that believes strongly in open source and
sharing so I got permission to release this as open source project component,
nice! :)&lt;/p&gt;
&lt;p&gt;At present the appearance of the component is not that great and you have to
put hand to customize the code of the component , in the future I hope to be
able to allow the customization of the graphical component directly in the
process of creating an instance rather than in its base code.&lt;/p&gt;
&lt;p&gt;The source of this component for the moment can be found in the main repository
of our application ( &lt;a class="reference external" href="https://bitbucket.org/sysgrove/sysgrove"&gt;https://bitbucket.org/sysgrove/sysgrove&lt;/a&gt; ) path sysgrove /
ui / classes / widgets / calendar.py&lt;/p&gt;&lt;/div&gt;</description><guid>https://francesco.pischedda.info/it/posts/our-qt-date-picker/</guid><pubDate>Tue, 10 Dec 2013 20:52:42 GMT</pubDate></item><item><title>Using buildbot at SysGrove</title><link>https://francesco.pischedda.info/it/posts/using-buildbot-at-sysgrove/</link><dc:creator>Francesco "fpsd" Pischedda</dc:creator><description>&lt;div&gt;&lt;p&gt;BuildBot (&lt;a class="reference external" href="http://buildbot.net/"&gt;http://buildbot.net/&lt;/a&gt;) is a framework created to simplify the
development of automation solutions in the field of software development.
Unlike other systems such as Jenkins (&lt;a class="reference external" href="http://jenkins-ci.org/"&gt;http://jenkins-ci.org/&lt;/a&gt;) or TravisCI
(&lt;a class="reference external" href="https://travis-ci.org/"&gt;https://travis-ci.org/&lt;/a&gt;) buildbot only provides a framework on which to build
the infrastructure that you need .
The project has client-server architecture where the server sends to the client
the work to be performed, the server is called master and the clients are
called slaves; the framework supports multiple masters and multiple slaves, in
this way the system architecture can easily grow with the needs of your
project.
Buildbot is available for virtually any platform, even if the current version
0.8.x platform support win32-64 is not exactly the best though still usable
with some changes (see &lt;a class="reference external" href="http://trac.buildbot.net/wiki/RunningBuildbotOnWindows"&gt;http://trac.buildbot.net/wiki/RunningBuildbotOnWindows&lt;/a&gt; )&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Buildbot at sysgrove&lt;/h2&gt;
&lt;p&gt;For our development needs in SysGrove( &lt;a class="reference external" href="http://sysgrove.com"&gt;http://sysgrove.com&lt;/a&gt;) buildbot is used to
generate the release of our application for the win32 platform. Every 12 hours
we verify that there are some changes in our repository
(&lt;a class="reference external" href="https://bitbucket.org/sysgrove/sysgrove"&gt;https://bitbucket.org/sysgrove/sysgrove&lt;/a&gt;) and in this case, the following
operations are performed:
- Download the project from the repository (we use git, but the system supports hg, svn, bazaar etc ...)
- Launch the test suite (in this case we use the testing tool discovery nosetests)
- Generate the executable using py2exe
- Build the initial database (sqlite and postgres)
- It creates the archive with the application executable and test database(s)
- Load the new release on "Confluence"&lt;/p&gt;
&lt;p&gt;Clearly doing all these steps manually is tedious and can beprone to errors
or oversights that would decrease the quality of our product.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="our-setup"&gt;
&lt;h2&gt;Our setup&lt;/h2&gt;
&lt;p&gt;As mentioned at the beginning we (&lt;a class="reference external" href="http://sysgrove.com/"&gt;http://sysgrove.com/&lt;/a&gt;) need to create an
executable for the platform win32 (and possibly in the future for linux and
osx) for which we need to run our script inside a win32 OS; given the relative
difficulty of configuring a master on windows it was decided to have the master
in a linux host (debian jessie) and a slave in a virtual machine
with windows 7 ™ since that the slaves give far fewer problems .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The configuration file, as with cfg extension, is a simple python script, you
can use this file to configure these main areas:
- Slaves: you can define how many slaves you want each with its own identity
- The scheduler: the scheduler indicate how and when the activities will be planned by the master
- The builder: indicate the steps to take to create a build
- Notifiers: the master can communicate in many ways the status of the build such as irc, email or web
- Various configurations such as the database to use to store the state of the system, the identity of the project (name, url) etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pitfalls"&gt;
&lt;h2&gt;Pitfalls&lt;/h2&gt;
&lt;p&gt;As I said earlier I had some problems with windows, probably due to my
inexperience with the version of python for this operating system.
One of the first difficulty concerns sqlalchemy, an ORM for python; buildbot
requires in fact a version of sqlalchemy == 0.7.10 as our application requires
a newer version.
Typically, such a problem is solved easily using the handy tool
virtualenv (&lt;a class="reference external" href="https://pypi.python.org/pypi/virtualenv"&gt;https://pypi.python.org/pypi/virtualenv&lt;/a&gt;) creating an environment
for the master (the part that needs access to a db, sqlite by default) and one
environment for the slave, but given my experience with windows, I could not
separate the environments (which is why the master is on a debian host and
the slave is a on windows VM).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Once you understand the general concepts of buildbot, extend and customize the
functionality becomes simply a work of configuring and creating scripts that do
the real work, besides the web interface by default enables us to keep track of
our builds and forcing new if it were needed.&lt;/p&gt;
&lt;p&gt;Clearly this is not a "point and click" tool to everyone and this is a good
thing, in my humble opinion and responsibility for the maintenance of such
a system requires knowledge of a typical IT department and not a manager who,
if desired, can always send us an email to request a build rather than messing
around with his hands no expert ;)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://francesco.pischedda.info/it/posts/using-buildbot-at-sysgrove/</guid><pubDate>Tue, 10 Dec 2013 20:25:11 GMT</pubDate></item><item><title>Having fun with RabbitMQ</title><link>https://francesco.pischedda.info/it/posts/having-fun-with-rabbitmq/</link><dc:creator>Francesco "fpsd" Pischedda</dc:creator><description>&lt;div&gt;&lt;div class="section" id="preface"&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;Lately I’ve had to work on a complex web application which have started to have
an increased (and increasing) number of users.
Unfortunately this web application was not built to scale and so problems
started to get to the surface.
When the user base was small to medium the load on the application server was
fairly low and we could focus on adding new features and growing our user base
until we landed on the Facebook platform.
At some point users started to came and the scheduled task took 10-20-40-70-90
minutues to complete leaving the users to stare at the “calculating tasks” page.&lt;/p&gt;
&lt;p&gt;The first approved (the correct word should be "imposed") solution was to
migrate our servers to AWS so we could increase host perfomance using bigger
and bigger servers until we reached the limits of the single machine again.&lt;/p&gt;
&lt;p&gt;After a lot of battling with the management we had the opportunity to detach
the application core from the web site and started to build the new architecture
with these loosely defined requirements:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;better use of resources&lt;/li&gt;
&lt;li&gt;better code organization and quality&lt;/li&gt;
&lt;li&gt;horizontal scaling&lt;/li&gt;
&lt;li&gt;manageabilty&lt;/li&gt;
&lt;li&gt;ready for future development&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I admit that those where my requirements, but the management undestood that they
have lost the ability to understand the architecture beyhond a simple web site
with a bounch of scheduled routines that, honestly, worked with the help of an
infinite dose of luck…and also my prototype run in a fraction of time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="building-blocks"&gt;
&lt;h2&gt;Building blocks&lt;/h2&gt;
&lt;p&gt;Our old backend has been broken in to those pieces:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;libcore : the base code extracted from the old and stinky web site&lt;/li&gt;
&lt;li&gt;RabbitMQ message broker&lt;/li&gt;
&lt;li&gt;job scheduler : send messages to appropriate exchanges at appropriate time&lt;/li&gt;
&lt;li&gt;workers : consume messages sent by the scheduler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Leaving libcore apart doing its stuff lets focus on the scheduler and the
workers; for details about RabbitMQ please refer to its web site
(&lt;a class="reference external" href="http://www.rabbitmq.com/"&gt;http://www.rabbitmq.com/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;As a scheduling library I have choosen the open source Quartz.NET
(&lt;a class="reference external" href="http://quartznet.sourceforge.net/"&gt;http://quartznet.sourceforge.net/&lt;/a&gt;) which provided a simple but powerful
interface to schedule jobs, I especially liked the ability to specify job
triggers with the well known and compact cron syntax.
Long story short the scheduled jobs harvests the tasks and send messages to
exchanges accordingly.
I think that the whole core plus the jobs are not bigger than some hundreds of
lines of code. Wonderful!&lt;/p&gt;
&lt;p&gt;In order to create a worker one should simply have to inherit from a
BaseConsumer class and override the "consume" method to do its tasks when a
message is received. Done. Cool :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Given this simple architecture what are the benefits? Lets see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;scaling: I simply have to add more workers in the same or different machines and the calculating power will increase accordingly&lt;/li&gt;
&lt;li&gt;flexibility: if a new task is required I have to create a new scheduled job and its consumer (even in a different language or platform) and maybe a new message type (messages are simple JSON described objects); after all is tested I have to update the scheduler and add a new worker either by updating a running worker or adding a new one without affecting the whole system; yes it can be done while the system is crunching its task and yes, obviously without affecting the web site(s)&lt;/li&gt;
&lt;li&gt;cost effective: if we have a lot of task to complete at a certain hour in the day I could simply turn on a couple of more machines when I need it and turn those off when the whole work is completed; if you have ever used the Amazon AWS infrastructure you understand of much one can save using this approach&lt;/li&gt;
&lt;li&gt;testing: having everything well separated I can test each block individually instead of having a code blob that is barely manageable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this short post I hope to increase interest in this simple way of doing
distribuited computing using a message broker and a simple but well architected
system.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://francesco.pischedda.info/it/posts/having-fun-with-rabbitmq/</guid><pubDate>Thu, 28 Feb 2013 20:13:45 GMT</pubDate></item></channel></rss>